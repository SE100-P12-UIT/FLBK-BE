components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT authorization header. Use `Bearer <token>` format.

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum:
            - user
            - admin
            - employee
        dateOfBirth:
          type: string
          format: date
        citizenId:
          type: string
        phoneNumber:
          type: string
        address:
          type: object
          properties:
            province:
              type: string
            district:
              type: string
            town:
              type: string
            street:
              type: string
      example:
        id: "5ebac534954b54139806c112"
        email: "fake@example.com"
        name: "fake name"
        role: "user"
        dateOfBirth: "1995-05-12"
        citizenId: "0123456789"
        phoneNumber: "0998877665"
        address:
          province: "XX"
          district: "District A"
          town: "Town B"
          street: "Street A"

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: "2020-05-12T16:18:04.793Z"

    AuthTokens:
      type: object
      properties:
        access:
          $ref: "#/components/schemas/Token"
        refresh:
          $ref: "#/components/schemas/Token"

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

    Role:
      type: object
      properties:
        name:
          type: string
        permissions:
          type: array
          items:
            type: string
      example:
        name: "user"
        permissions:
          - "viewFlight"
          - "bookFlight"

    TicketType:
      type: object
      properties:
        typeName:
          type: string
        coefficient:
          type: number
      example:
        typeName: "common"
        coefficient: 0.5
    Plane:
      type: object
      properties:
        planeName:
          type: string
        maxSeats:
          type: number
        airline:
          type: string
        total:
          type: number
        seats:
          type: array
          items:
            type: object
            properties:
              seatName:
                type: string
              seatType:
                type: string
                enum:
                  - business
                  - common
              disable:
                type: boolean
      example:
        planeName: Airbus A320
        maxSeats: 186
        airline: Vietnam Airlines
        total: 1
        seats:
          - seatName: "A1"
            seatType: "business"
            disable: false
          - seatName: "B1"
            seatType: "business"
            disable: false
          - seatName: "A2"
            seatType: "common"
            disable: false
          - seatName: "A3"
            disable: true
    Flight:
      type: object
      properties:
        flightName:
          type: string
        route:
          type: array
          items:
            type: object
            properties:
              airport:
                type: string
              location:
                type: string
        departureTime:
          type: string
          format: date-time
        duration:
          type: integer
        price:
          type: number
          format: double
        planeId:
          type: string
        seats:
          type: array
          items:
            type: object
            properties:
              seatId:
                type: string
              isAvailable:
                type: boolean
      example:
        flightName: "VN123"
        route:
          - airport: Noi Bai
            location: Ha Noi
          - airport: Tan Son Nhat
            location: Ho Chi Minh
        departureTime: "2024-01-01T12:00:00.000Z"
        duration: 180
        price: 150.50
        planeId: "64c8d45b634c3c0012345680"
        seats:
          - seatId: "A1"
            isAvailable: true
          - seatId: "B1"
            isAvailable: false

  responses:
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: "Email already taken"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 401
            message: "Please authenticate"

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 400
            message: "Bad request"

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            code: 500
            message: "Internal server error"
